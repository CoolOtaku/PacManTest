import { Direction, eDirection } from '../../../Direction';

export interface IField
{
    get Width(): number;
    get Height(): number;

    IsCanMove(x: number, y: number, direction: eDirection): boolean;
}

// ################################

export class Field implements IField
{
    private readonly _grid: number[][][];

    public constructor()
    {
        this._grid = [
            // Line 1
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0],
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1],
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 2
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0],
                [1, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 0],
                [0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 1, 0],
                [1, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 3
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0],
                [1, 0, 0, 0], [0, 1, 0, 0], [1, 0, 1, 0], [0, 0, 0, 0],
                [0, 1, 1, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0],
                [1, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 4
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0],
                [0, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 1], [0, 0, 0, 1],
                [0, 1, 0, 1], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 5
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1],
                [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 1],
                [0, 0, 1, 1], [0, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0],
                [0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 6
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0],
                [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0],
                [1, 0, 1, 0], [0, 0, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0],
                [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 7
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1],
                [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 0],
                [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 0],
                [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 8
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 1, 1, 0],
                [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 1, 0, 0],
                [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 1, 0, 0],
                [1, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 9
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0],
                [1, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0],
                [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 10
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1],
                [0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 0],
                [0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 1], [1, 0, 0, 1],
                [0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 11
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0],
                [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0],
                [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0],
                [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
            // Line 12
            [
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
            ],
        ];
    }

    private IsOutOfRange(x: number, y: number)
    { return x < 0 || y < 0 || x >= this.Width || y >= this.Height; }

    // ======= IField ============

    public get Width(): number
    { return 16; }

    public get Height(): number
    { return 12; }

    public IsCanMove(x: number, y: number, direction: eDirection): boolean
    {
        if (this.IsOutOfRange(x, y))
        {
            return false;
        }

        let newPosition = Direction.GetNextPosition(x, y, direction);

        if (this.IsOutOfRange(newPosition.x, newPosition.y))
        {
            return false;
        }

        let cellWalls = this._grid[y][x];

        switch (direction)
        {
            case eDirection.LEFT:
                return cellWalls[0] === 0;
            case eDirection.RIGHT:
                return cellWalls[1] === 0;
            case eDirection.UP:
                return cellWalls[2] === 0;
            case eDirection.DOWN:
                return cellWalls[3] === 0;
            default:
                return true;
        }
    }
}